if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
install.packages("htmltools')
install.packages("htmltools")
library(htmltools)
install.packages("htmltools")
install.packages("fastmap")
# install.packages("htmltools")
library(htmltools)
install.packages("htmltools")
xcode-select --install
# install.packages("htmltools")
library(htmltools)
# install.packages("htmltools")
library(r-htmltools)
# install.packages("htmltools")
# library(htmltools)
source("https://bioconductor.org/biocLite.R")
install.packages("BiocManager")
library(BiocManager)
library(BiocManager)
BiocManager::install("DESeq2")
library(affy)
gene_raw_data <- ReadAffy(celfile.path = "/Users/alex/Documents/GitHub/Breast-Cancer-Gene-Regulatory-Network-and-Risk-Prediction/GSE45827_RAW/")
arraysRMA = rma(gene_raw_data)
arraysRMA
arraysRMAtable=exprs(arraysRMA)
View(arraysRMAtable)
arraysRMA = rma(gene_raw_data, normalize = FALSE)
arraysRMAtable=exprs(arraysRMA)
View(arraysRMAtable)
log_arraysRMAtable=exprs(arraysRMA)
count_table = 2^log_arraysRMAtable
View(count_table)
log_arraysRMAtable=exprs(arraysRMA)
count_table = as.data.frame(round(2^log_arraysRMAtable))
head(count_table)
pheno_data <- phenoData(gene_raw_data)
View(pheno_data)
View(pheno_data)
View(arraysRMA)
colnames(count_table)
colnames(count_table) <- substr(colnames(count_table),8,10)
head(count_table)
install.packages("Dict")
count_table <- count_table[-c(3,6,8,10,13,16,19,24,28,31,34,36,42,48,50,52,54,57,62,71,76,82,90,)]
count_table <- count_table[-c(3,6,8,10,13,16,19,24,28,31,34,36,42,48,50,52,54,57,62,71,76,82,90)]
count_table
count_table[,'169']
count_table
count_table[,'084']
coldata <- colnames(count_table)
coldata
coldata <- as.data.frame(colnames(count_table))
coldata
coldata <- as.data.frame(as.integer(colnames(count_table)))
colnames(coldata) <- 'Sample'
coldata <- coldata %>%
mutate(type = case_when(
Sample > 168 & Sample < 180 ~ 'non-cancer',
TRUE ~ 'cancer'
)
)
# library(BiocManager)
# BiocManager::install("DESeq2")
library(dplyr)
library(readr)
library(DESeq2)
coldata <- as.data.frame(as.integer(colnames(count_table)))
colnames(coldata) <- 'Sample'
coldata <- coldata %>%
mutate(type = case_when(
Sample > 168 & Sample < 180 ~ 'non-cancer',
TRUE ~ 'cancer'
)
)
coldata
colnames(count_table) <- as.integer(colnames(count_table))
count_table
coldata <- as.data.frame(as.integer(colnames(count_table)))
colnames(coldata) <- 'Sample'
coldata <- coldata %>%
mutate(type = case_when(
Sample > 168 & Sample < 180 ~ 'non-cancer',
TRUE ~ 'cancer'
)
)
coldata
dds <- DESeqDataSetFromMatrix(countData = count_table,
colData = coldata,
design = ~ type)
dds
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds$type <- relevel(dds$type, ref = "non-cancer")
dds <- DESeq(dds)
res <- results(dds)
res
plotMA(res, ylim=c(-2,2))
plotMA(res)
resultsNames(dds)
# Log Fold Change Shrink
resLFC <- lfcShrink(dds, coef="type_cancer_vs_non.cancer", type="apeglm")
BiocManager::install("apeglm")
# Log Fold Change Shrink
resLFC <- lfcShrink(dds, coef="type_cancer_vs_non.cancer", type="apeglm")
resLFC
resOrdered <- res[order(res$pvalue),]
resOrdered
resOrdered$pvalue < 0.00001
filter(res, pvalue < 0.00001)
filter(res$pvalue, pvalue < 0.00001)
resOrdered$pvalue < 0.00000001
which(resOrdered$pvalue < 0.00000001)
which(resOrdered$pvalue < 10^-10)
which(resOrdered$pvalue < 10^-20)
which(resOrdered$pvalue < 10^-40)
which(resOrdered$pvalue < 10^-50)
which(resOrdered$pvalue < 10^-20)
which(resOrdered$pvalue < 10^-30)
which(resOrdered$pvalue < 10^-50)
save.image("~/Documents/GitHub/Breast-Cancer-Gene-Regulatory-Network-and-Risk-Prediction/Differential_Gene_Expression.RData")
load("~/Documents/GitHub/Breast-Cancer-Gene-Regulatory-Network-and-Risk-Prediction/Differential_Gene_Expression.RData")
resOrdered <- res[order(res$pvalue),]
resOrdered
resOrdered$log2FoldChange
dadta.frame(resOrdered$log2FoldChange, resOrdered$pvalue)
data.frame(resOrdered$log2FoldChange, resOrdered$pvalue)
GDE = data.frame(resOrdered$log2FoldChange, resOrdered$pvalue)
rownames(GDE) = resOrdered@rownames
colnames(GDE) = c('Log2FoldChange','Ordered$pvalue')
GDE
write.csv(GDE, "GDE_Outcome.csv", row.names = TRUE)
getwd
getwd()
setwd("~/Documents/GitHub/Breast-Cancer-Gene-Regulatory-Network-and-Risk-Prediction")
write.csv(GDE, "GDE_Outcome.csv", row.names = TRUE)
